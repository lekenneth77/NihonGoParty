//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""FreeCamera"",
            ""id"": ""9d5e012d-c235-482a-8cea-c7a248785848"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b746c260-b3e8-4ec9-aec9-29e1407a79be"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""26e9c8d2-ae31-47ab-9939-a9b3c43cfcd4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4a01e5c1-b1d8-459d-9e67-610832da028a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""01baf788-47f6-4034-b58e-77fd8a9c2cb0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a4e85f95-2928-4de2-9b3b-88b4b70562b0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cfe826d6-862e-4d85-aca6-a8e46bbe1277"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""d72b6703-2762-4351-bf19-954483573456"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""184ff254-8343-477c-98f6-3f73157adc4d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f32cb763-5948-4eaf-a141-5af47a799252"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9b47df94-d7bc-45ae-8886-82b8d6c0572b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8c432b68-43fb-4408-ad3b-2bb59273126f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Dice"",
            ""id"": ""697681cc-1cd0-4915-8e80-2e54ca85589d"",
            ""actions"": [
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""4309b75a-cae3-4c4a-afee-fdf2c7cb1dcc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""24c3101b-09be-4ab8-b9be-7d70665de550"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BoardController"",
            ""id"": ""92618c20-d3e4-4fef-9f89-f92a9c537996"",
            ""actions"": [
                {
                    ""name"": ""ToggleFreelook"",
                    ""type"": ""Button"",
                    ""id"": ""571054da-728f-45f8-bcdf-29d23ba8304f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""874232f3-5b00-4d2e-bd2d-bf66d68e9da0"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ToggleFreelook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pause"",
            ""id"": ""10bb2dfc-2a04-48d8-a3e3-47ecab1a50b2"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""b1a75e01-3739-4ca2-9b5d-3190fb6554c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8e2d1483-6280-40d3-98bf-b6928cae6c7e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0864ff8-f44d-4a41-9136-f343a0132b46"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // FreeCamera
        m_FreeCamera = asset.FindActionMap("FreeCamera", throwIfNotFound: true);
        m_FreeCamera_Move = m_FreeCamera.FindAction("Move", throwIfNotFound: true);
        // Dice
        m_Dice = asset.FindActionMap("Dice", throwIfNotFound: true);
        m_Dice_Roll = m_Dice.FindAction("Roll", throwIfNotFound: true);
        // BoardController
        m_BoardController = asset.FindActionMap("BoardController", throwIfNotFound: true);
        m_BoardController_ToggleFreelook = m_BoardController.FindAction("ToggleFreelook", throwIfNotFound: true);
        // Pause
        m_Pause = asset.FindActionMap("Pause", throwIfNotFound: true);
        m_Pause_Pause = m_Pause.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FreeCamera
    private readonly InputActionMap m_FreeCamera;
    private List<IFreeCameraActions> m_FreeCameraActionsCallbackInterfaces = new List<IFreeCameraActions>();
    private readonly InputAction m_FreeCamera_Move;
    public struct FreeCameraActions
    {
        private @Controls m_Wrapper;
        public FreeCameraActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_FreeCamera_Move;
        public InputActionMap Get() { return m_Wrapper.m_FreeCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FreeCameraActions set) { return set.Get(); }
        public void AddCallbacks(IFreeCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_FreeCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FreeCameraActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IFreeCameraActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IFreeCameraActions instance)
        {
            if (m_Wrapper.m_FreeCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFreeCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_FreeCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FreeCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FreeCameraActions @FreeCamera => new FreeCameraActions(this);

    // Dice
    private readonly InputActionMap m_Dice;
    private List<IDiceActions> m_DiceActionsCallbackInterfaces = new List<IDiceActions>();
    private readonly InputAction m_Dice_Roll;
    public struct DiceActions
    {
        private @Controls m_Wrapper;
        public DiceActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Roll => m_Wrapper.m_Dice_Roll;
        public InputActionMap Get() { return m_Wrapper.m_Dice; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DiceActions set) { return set.Get(); }
        public void AddCallbacks(IDiceActions instance)
        {
            if (instance == null || m_Wrapper.m_DiceActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DiceActionsCallbackInterfaces.Add(instance);
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
        }

        private void UnregisterCallbacks(IDiceActions instance)
        {
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
        }

        public void RemoveCallbacks(IDiceActions instance)
        {
            if (m_Wrapper.m_DiceActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDiceActions instance)
        {
            foreach (var item in m_Wrapper.m_DiceActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DiceActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DiceActions @Dice => new DiceActions(this);

    // BoardController
    private readonly InputActionMap m_BoardController;
    private List<IBoardControllerActions> m_BoardControllerActionsCallbackInterfaces = new List<IBoardControllerActions>();
    private readonly InputAction m_BoardController_ToggleFreelook;
    public struct BoardControllerActions
    {
        private @Controls m_Wrapper;
        public BoardControllerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleFreelook => m_Wrapper.m_BoardController_ToggleFreelook;
        public InputActionMap Get() { return m_Wrapper.m_BoardController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BoardControllerActions set) { return set.Get(); }
        public void AddCallbacks(IBoardControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_BoardControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BoardControllerActionsCallbackInterfaces.Add(instance);
            @ToggleFreelook.started += instance.OnToggleFreelook;
            @ToggleFreelook.performed += instance.OnToggleFreelook;
            @ToggleFreelook.canceled += instance.OnToggleFreelook;
        }

        private void UnregisterCallbacks(IBoardControllerActions instance)
        {
            @ToggleFreelook.started -= instance.OnToggleFreelook;
            @ToggleFreelook.performed -= instance.OnToggleFreelook;
            @ToggleFreelook.canceled -= instance.OnToggleFreelook;
        }

        public void RemoveCallbacks(IBoardControllerActions instance)
        {
            if (m_Wrapper.m_BoardControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBoardControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_BoardControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BoardControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BoardControllerActions @BoardController => new BoardControllerActions(this);

    // Pause
    private readonly InputActionMap m_Pause;
    private List<IPauseActions> m_PauseActionsCallbackInterfaces = new List<IPauseActions>();
    private readonly InputAction m_Pause_Pause;
    public struct PauseActions
    {
        private @Controls m_Wrapper;
        public PauseActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Pause_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Pause; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseActions set) { return set.Get(); }
        public void AddCallbacks(IPauseActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPauseActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPauseActions instance)
        {
            if (m_Wrapper.m_PauseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPauseActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PauseActions @Pause => new PauseActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IFreeCameraActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IDiceActions
    {
        void OnRoll(InputAction.CallbackContext context);
    }
    public interface IBoardControllerActions
    {
        void OnToggleFreelook(InputAction.CallbackContext context);
    }
    public interface IPauseActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
}
