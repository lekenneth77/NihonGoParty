//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""FreeCamera"",
            ""id"": ""9d5e012d-c235-482a-8cea-c7a248785848"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b746c260-b3e8-4ec9-aec9-29e1407a79be"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""26e9c8d2-ae31-47ab-9939-a9b3c43cfcd4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4a01e5c1-b1d8-459d-9e67-610832da028a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""01baf788-47f6-4034-b58e-77fd8a9c2cb0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a4e85f95-2928-4de2-9b3b-88b4b70562b0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cfe826d6-862e-4d85-aca6-a8e46bbe1277"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""d72b6703-2762-4351-bf19-954483573456"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""184ff254-8343-477c-98f6-3f73157adc4d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f32cb763-5948-4eaf-a141-5af47a799252"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9b47df94-d7bc-45ae-8886-82b8d6c0572b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8c432b68-43fb-4408-ad3b-2bb59273126f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Dice"",
            ""id"": ""697681cc-1cd0-4915-8e80-2e54ca85589d"",
            ""actions"": [
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""4309b75a-cae3-4c4a-afee-fdf2c7cb1dcc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""24c3101b-09be-4ab8-b9be-7d70665de550"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BoardController"",
            ""id"": ""92618c20-d3e4-4fef-9f89-f92a9c537996"",
            ""actions"": [
                {
                    ""name"": ""ToggleFreelook"",
                    ""type"": ""Button"",
                    ""id"": ""571054da-728f-45f8-bcdf-29d23ba8304f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""874232f3-5b00-4d2e-bd2d-bf66d68e9da0"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ToggleFreelook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pause"",
            ""id"": ""10bb2dfc-2a04-48d8-a3e3-47ecab1a50b2"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""b1a75e01-3739-4ca2-9b5d-3190fb6554c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8e2d1483-6280-40d3-98bf-b6928cae6c7e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0864ff8-f44d-4a41-9136-f343a0132b46"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""KanjiCrossRotate"",
            ""id"": ""e0fef39f-f418-4d68-8139-7ed5f4283e6c"",
            ""actions"": [
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""f5642539-9d3c-4d2c-ba21-62167c097ad7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D"",
                    ""type"": ""Button"",
                    ""id"": ""64e79c80-e4c6-4089-a55f-e44becb37691"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""W"",
                    ""type"": ""Button"",
                    ""id"": ""58ae9c15-f18c-4317-8bcd-9733086672f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Key"",
                    ""type"": ""Button"",
                    ""id"": ""f0c8b514-d966-48c3-bfdd-a47cd7319031"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Key"",
                    ""type"": ""Button"",
                    ""id"": ""9b7e4d74-1601-42fd-b713-c348d15e087b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up Key"",
                    ""type"": ""Button"",
                    ""id"": ""b5babe2b-f922-476f-b1ec-806ae7c4ba38"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""903dbb41-06f0-4d25-8668-cb2323c58315"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4c6da33-f4f1-424a-a43c-a99191c32868"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c1e6a6d-19b8-445a-93de-58315bd08dc0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""W"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e83e7fd9-78af-4739-84c0-3233a071448e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2229ef99-cdfc-43bf-b8e7-3b483865c270"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87fdb68a-c4a7-4a55-a13e-4fbb5068c303"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TreeHop"",
            ""id"": ""3e10c6a7-70f7-45f9-b8a9-a6e1391ba1cf"",
            ""actions"": [
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""d85e5642-0eed-417f-8562-a75ff5b3adc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D"",
                    ""type"": ""Button"",
                    ""id"": ""e2a3ed5e-d2e2-4121-8b45-e8f0eb346532"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""R"",
                    ""type"": ""Button"",
                    ""id"": ""fdcb136e-d3bd-411c-a236-173f9f9fdc62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Y"",
                    ""type"": ""Button"",
                    ""id"": ""048f9cd4-a843-43d9-875e-96a609c44dfb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""J"",
                    ""type"": ""Button"",
                    ""id"": ""93e093f4-c36a-4cbb-88a9-a5be456ccc4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""L"",
                    ""type"": ""Button"",
                    ""id"": ""145aa5c5-856f-477d-a5d0-6d93d2b95d26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left AKey"",
                    ""type"": ""Button"",
                    ""id"": ""c676aaee-acdc-410e-84e9-4f2cf56b281f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right AKey"",
                    ""type"": ""Button"",
                    ""id"": ""2ab87fef-4bed-4a55-a517-9003f0a72574"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b2d0d611-5309-4e51-bdea-7ebf613477e6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fdf581a-474e-413c-8b80-2c48fea62b2c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d487a641-9daf-4f8e-8887-c327841a492d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""R"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f54a1ae-f569-4556-8137-5138b0502161"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27bbec65-38f8-4334-95f3-e2e724b1a7d0"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""J"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""018dd8b2-edd5-45b4-b7a4-36c40a399172"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""L"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2be36c59-2f63-4168-a5c0-fe25e31250bb"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left AKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4901b0b8-825c-4413-b309-b6b08c77938c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right AKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""QuizGame"",
            ""id"": ""3af318da-2d60-4908-b0c8-95a38168980d"",
            ""actions"": [
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""66fd120a-aade-4443-9124-38c424076b2c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""R"",
                    ""type"": ""Button"",
                    ""id"": ""19792282-6291-4d12-a20f-90f1744af776"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""H"",
                    ""type"": ""Button"",
                    ""id"": ""2b86c727-ce94-4500-bbcc-2f0d7ce3a848"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P"",
                    ""type"": ""Button"",
                    ""id"": ""b1fd08d7-7382-4537-9bfe-f6abaa87872b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""50f81805-91e3-43d8-bd75-55c4f8460d45"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37547eed-965b-421b-acb1-789b44d9684c"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""R"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31e802c3-7b25-4926-96f0-9f56031de409"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""H"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b171883-79fb-4c65-b079-3504acf568ee"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SpeedType"",
            ""id"": ""3139ee81-2ae0-449a-a312-f306c322a724"",
            ""actions"": [
                {
                    ""name"": ""Keyboard"",
                    ""type"": ""Value"",
                    ""id"": ""a35ea5b1-9cee-4718-a4ae-50e8c7341376"",
                    ""expectedControlType"": ""Key"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""71225253-f351-4868-a151-08f5fde99f7b"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TunnelRunner"",
            ""id"": ""90750029-46e2-401e-b835-29e65f1537a2"",
            ""actions"": [
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""d104656a-c9aa-4e1b-b663-33ba36a38eb2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D"",
                    ""type"": ""Button"",
                    ""id"": ""056e0032-1e3d-469e-a79b-81649bb39ec5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Arrow Key"",
                    ""type"": ""Button"",
                    ""id"": ""a9b66fd3-a580-4870-9693-fe4e7bb93f83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Arrow Key"",
                    ""type"": ""Button"",
                    ""id"": ""5f62a08b-e4c5-4049-8842-618e7eae2a65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e0652baf-8593-4e0f-9450-2c614de125c1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c42f402-08df-43f2-95b4-9231d813d14f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3df86649-ace2-4ebf-96bd-a5056455964c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Arrow Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e948925-ac04-463d-9722-ff1b1eb9f8a8"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Arrow Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // FreeCamera
        m_FreeCamera = asset.FindActionMap("FreeCamera", throwIfNotFound: true);
        m_FreeCamera_Move = m_FreeCamera.FindAction("Move", throwIfNotFound: true);
        // Dice
        m_Dice = asset.FindActionMap("Dice", throwIfNotFound: true);
        m_Dice_Roll = m_Dice.FindAction("Roll", throwIfNotFound: true);
        // BoardController
        m_BoardController = asset.FindActionMap("BoardController", throwIfNotFound: true);
        m_BoardController_ToggleFreelook = m_BoardController.FindAction("ToggleFreelook", throwIfNotFound: true);
        // Pause
        m_Pause = asset.FindActionMap("Pause", throwIfNotFound: true);
        m_Pause_Pause = m_Pause.FindAction("Pause", throwIfNotFound: true);
        // KanjiCrossRotate
        m_KanjiCrossRotate = asset.FindActionMap("KanjiCrossRotate", throwIfNotFound: true);
        m_KanjiCrossRotate_A = m_KanjiCrossRotate.FindAction("A", throwIfNotFound: true);
        m_KanjiCrossRotate_D = m_KanjiCrossRotate.FindAction("D", throwIfNotFound: true);
        m_KanjiCrossRotate_W = m_KanjiCrossRotate.FindAction("W", throwIfNotFound: true);
        m_KanjiCrossRotate_LeftKey = m_KanjiCrossRotate.FindAction("Left Key", throwIfNotFound: true);
        m_KanjiCrossRotate_RightKey = m_KanjiCrossRotate.FindAction("Right Key", throwIfNotFound: true);
        m_KanjiCrossRotate_UpKey = m_KanjiCrossRotate.FindAction("Up Key", throwIfNotFound: true);
        // TreeHop
        m_TreeHop = asset.FindActionMap("TreeHop", throwIfNotFound: true);
        m_TreeHop_A = m_TreeHop.FindAction("A", throwIfNotFound: true);
        m_TreeHop_D = m_TreeHop.FindAction("D", throwIfNotFound: true);
        m_TreeHop_R = m_TreeHop.FindAction("R", throwIfNotFound: true);
        m_TreeHop_Y = m_TreeHop.FindAction("Y", throwIfNotFound: true);
        m_TreeHop_J = m_TreeHop.FindAction("J", throwIfNotFound: true);
        m_TreeHop_L = m_TreeHop.FindAction("L", throwIfNotFound: true);
        m_TreeHop_LeftAKey = m_TreeHop.FindAction("Left AKey", throwIfNotFound: true);
        m_TreeHop_RightAKey = m_TreeHop.FindAction("Right AKey", throwIfNotFound: true);
        // QuizGame
        m_QuizGame = asset.FindActionMap("QuizGame", throwIfNotFound: true);
        m_QuizGame_A = m_QuizGame.FindAction("A", throwIfNotFound: true);
        m_QuizGame_R = m_QuizGame.FindAction("R", throwIfNotFound: true);
        m_QuizGame_H = m_QuizGame.FindAction("H", throwIfNotFound: true);
        m_QuizGame_P = m_QuizGame.FindAction("P", throwIfNotFound: true);
        // SpeedType
        m_SpeedType = asset.FindActionMap("SpeedType", throwIfNotFound: true);
        m_SpeedType_Keyboard = m_SpeedType.FindAction("Keyboard", throwIfNotFound: true);
        // TunnelRunner
        m_TunnelRunner = asset.FindActionMap("TunnelRunner", throwIfNotFound: true);
        m_TunnelRunner_A = m_TunnelRunner.FindAction("A", throwIfNotFound: true);
        m_TunnelRunner_D = m_TunnelRunner.FindAction("D", throwIfNotFound: true);
        m_TunnelRunner_LeftArrowKey = m_TunnelRunner.FindAction("Left Arrow Key", throwIfNotFound: true);
        m_TunnelRunner_RightArrowKey = m_TunnelRunner.FindAction("Right Arrow Key", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FreeCamera
    private readonly InputActionMap m_FreeCamera;
    private List<IFreeCameraActions> m_FreeCameraActionsCallbackInterfaces = new List<IFreeCameraActions>();
    private readonly InputAction m_FreeCamera_Move;
    public struct FreeCameraActions
    {
        private @Controls m_Wrapper;
        public FreeCameraActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_FreeCamera_Move;
        public InputActionMap Get() { return m_Wrapper.m_FreeCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FreeCameraActions set) { return set.Get(); }
        public void AddCallbacks(IFreeCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_FreeCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FreeCameraActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IFreeCameraActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IFreeCameraActions instance)
        {
            if (m_Wrapper.m_FreeCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFreeCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_FreeCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FreeCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FreeCameraActions @FreeCamera => new FreeCameraActions(this);

    // Dice
    private readonly InputActionMap m_Dice;
    private List<IDiceActions> m_DiceActionsCallbackInterfaces = new List<IDiceActions>();
    private readonly InputAction m_Dice_Roll;
    public struct DiceActions
    {
        private @Controls m_Wrapper;
        public DiceActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Roll => m_Wrapper.m_Dice_Roll;
        public InputActionMap Get() { return m_Wrapper.m_Dice; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DiceActions set) { return set.Get(); }
        public void AddCallbacks(IDiceActions instance)
        {
            if (instance == null || m_Wrapper.m_DiceActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DiceActionsCallbackInterfaces.Add(instance);
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
        }

        private void UnregisterCallbacks(IDiceActions instance)
        {
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
        }

        public void RemoveCallbacks(IDiceActions instance)
        {
            if (m_Wrapper.m_DiceActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDiceActions instance)
        {
            foreach (var item in m_Wrapper.m_DiceActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DiceActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DiceActions @Dice => new DiceActions(this);

    // BoardController
    private readonly InputActionMap m_BoardController;
    private List<IBoardControllerActions> m_BoardControllerActionsCallbackInterfaces = new List<IBoardControllerActions>();
    private readonly InputAction m_BoardController_ToggleFreelook;
    public struct BoardControllerActions
    {
        private @Controls m_Wrapper;
        public BoardControllerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleFreelook => m_Wrapper.m_BoardController_ToggleFreelook;
        public InputActionMap Get() { return m_Wrapper.m_BoardController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BoardControllerActions set) { return set.Get(); }
        public void AddCallbacks(IBoardControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_BoardControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BoardControllerActionsCallbackInterfaces.Add(instance);
            @ToggleFreelook.started += instance.OnToggleFreelook;
            @ToggleFreelook.performed += instance.OnToggleFreelook;
            @ToggleFreelook.canceled += instance.OnToggleFreelook;
        }

        private void UnregisterCallbacks(IBoardControllerActions instance)
        {
            @ToggleFreelook.started -= instance.OnToggleFreelook;
            @ToggleFreelook.performed -= instance.OnToggleFreelook;
            @ToggleFreelook.canceled -= instance.OnToggleFreelook;
        }

        public void RemoveCallbacks(IBoardControllerActions instance)
        {
            if (m_Wrapper.m_BoardControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBoardControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_BoardControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BoardControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BoardControllerActions @BoardController => new BoardControllerActions(this);

    // Pause
    private readonly InputActionMap m_Pause;
    private List<IPauseActions> m_PauseActionsCallbackInterfaces = new List<IPauseActions>();
    private readonly InputAction m_Pause_Pause;
    public struct PauseActions
    {
        private @Controls m_Wrapper;
        public PauseActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Pause_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Pause; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseActions set) { return set.Get(); }
        public void AddCallbacks(IPauseActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPauseActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPauseActions instance)
        {
            if (m_Wrapper.m_PauseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPauseActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PauseActions @Pause => new PauseActions(this);

    // KanjiCrossRotate
    private readonly InputActionMap m_KanjiCrossRotate;
    private List<IKanjiCrossRotateActions> m_KanjiCrossRotateActionsCallbackInterfaces = new List<IKanjiCrossRotateActions>();
    private readonly InputAction m_KanjiCrossRotate_A;
    private readonly InputAction m_KanjiCrossRotate_D;
    private readonly InputAction m_KanjiCrossRotate_W;
    private readonly InputAction m_KanjiCrossRotate_LeftKey;
    private readonly InputAction m_KanjiCrossRotate_RightKey;
    private readonly InputAction m_KanjiCrossRotate_UpKey;
    public struct KanjiCrossRotateActions
    {
        private @Controls m_Wrapper;
        public KanjiCrossRotateActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @A => m_Wrapper.m_KanjiCrossRotate_A;
        public InputAction @D => m_Wrapper.m_KanjiCrossRotate_D;
        public InputAction @W => m_Wrapper.m_KanjiCrossRotate_W;
        public InputAction @LeftKey => m_Wrapper.m_KanjiCrossRotate_LeftKey;
        public InputAction @RightKey => m_Wrapper.m_KanjiCrossRotate_RightKey;
        public InputAction @UpKey => m_Wrapper.m_KanjiCrossRotate_UpKey;
        public InputActionMap Get() { return m_Wrapper.m_KanjiCrossRotate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KanjiCrossRotateActions set) { return set.Get(); }
        public void AddCallbacks(IKanjiCrossRotateActions instance)
        {
            if (instance == null || m_Wrapper.m_KanjiCrossRotateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KanjiCrossRotateActionsCallbackInterfaces.Add(instance);
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @D.started += instance.OnD;
            @D.performed += instance.OnD;
            @D.canceled += instance.OnD;
            @W.started += instance.OnW;
            @W.performed += instance.OnW;
            @W.canceled += instance.OnW;
            @LeftKey.started += instance.OnLeftKey;
            @LeftKey.performed += instance.OnLeftKey;
            @LeftKey.canceled += instance.OnLeftKey;
            @RightKey.started += instance.OnRightKey;
            @RightKey.performed += instance.OnRightKey;
            @RightKey.canceled += instance.OnRightKey;
            @UpKey.started += instance.OnUpKey;
            @UpKey.performed += instance.OnUpKey;
            @UpKey.canceled += instance.OnUpKey;
        }

        private void UnregisterCallbacks(IKanjiCrossRotateActions instance)
        {
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @D.started -= instance.OnD;
            @D.performed -= instance.OnD;
            @D.canceled -= instance.OnD;
            @W.started -= instance.OnW;
            @W.performed -= instance.OnW;
            @W.canceled -= instance.OnW;
            @LeftKey.started -= instance.OnLeftKey;
            @LeftKey.performed -= instance.OnLeftKey;
            @LeftKey.canceled -= instance.OnLeftKey;
            @RightKey.started -= instance.OnRightKey;
            @RightKey.performed -= instance.OnRightKey;
            @RightKey.canceled -= instance.OnRightKey;
            @UpKey.started -= instance.OnUpKey;
            @UpKey.performed -= instance.OnUpKey;
            @UpKey.canceled -= instance.OnUpKey;
        }

        public void RemoveCallbacks(IKanjiCrossRotateActions instance)
        {
            if (m_Wrapper.m_KanjiCrossRotateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKanjiCrossRotateActions instance)
        {
            foreach (var item in m_Wrapper.m_KanjiCrossRotateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KanjiCrossRotateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KanjiCrossRotateActions @KanjiCrossRotate => new KanjiCrossRotateActions(this);

    // TreeHop
    private readonly InputActionMap m_TreeHop;
    private List<ITreeHopActions> m_TreeHopActionsCallbackInterfaces = new List<ITreeHopActions>();
    private readonly InputAction m_TreeHop_A;
    private readonly InputAction m_TreeHop_D;
    private readonly InputAction m_TreeHop_R;
    private readonly InputAction m_TreeHop_Y;
    private readonly InputAction m_TreeHop_J;
    private readonly InputAction m_TreeHop_L;
    private readonly InputAction m_TreeHop_LeftAKey;
    private readonly InputAction m_TreeHop_RightAKey;
    public struct TreeHopActions
    {
        private @Controls m_Wrapper;
        public TreeHopActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @A => m_Wrapper.m_TreeHop_A;
        public InputAction @D => m_Wrapper.m_TreeHop_D;
        public InputAction @R => m_Wrapper.m_TreeHop_R;
        public InputAction @Y => m_Wrapper.m_TreeHop_Y;
        public InputAction @J => m_Wrapper.m_TreeHop_J;
        public InputAction @L => m_Wrapper.m_TreeHop_L;
        public InputAction @LeftAKey => m_Wrapper.m_TreeHop_LeftAKey;
        public InputAction @RightAKey => m_Wrapper.m_TreeHop_RightAKey;
        public InputActionMap Get() { return m_Wrapper.m_TreeHop; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TreeHopActions set) { return set.Get(); }
        public void AddCallbacks(ITreeHopActions instance)
        {
            if (instance == null || m_Wrapper.m_TreeHopActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TreeHopActionsCallbackInterfaces.Add(instance);
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @D.started += instance.OnD;
            @D.performed += instance.OnD;
            @D.canceled += instance.OnD;
            @R.started += instance.OnR;
            @R.performed += instance.OnR;
            @R.canceled += instance.OnR;
            @Y.started += instance.OnY;
            @Y.performed += instance.OnY;
            @Y.canceled += instance.OnY;
            @J.started += instance.OnJ;
            @J.performed += instance.OnJ;
            @J.canceled += instance.OnJ;
            @L.started += instance.OnL;
            @L.performed += instance.OnL;
            @L.canceled += instance.OnL;
            @LeftAKey.started += instance.OnLeftAKey;
            @LeftAKey.performed += instance.OnLeftAKey;
            @LeftAKey.canceled += instance.OnLeftAKey;
            @RightAKey.started += instance.OnRightAKey;
            @RightAKey.performed += instance.OnRightAKey;
            @RightAKey.canceled += instance.OnRightAKey;
        }

        private void UnregisterCallbacks(ITreeHopActions instance)
        {
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @D.started -= instance.OnD;
            @D.performed -= instance.OnD;
            @D.canceled -= instance.OnD;
            @R.started -= instance.OnR;
            @R.performed -= instance.OnR;
            @R.canceled -= instance.OnR;
            @Y.started -= instance.OnY;
            @Y.performed -= instance.OnY;
            @Y.canceled -= instance.OnY;
            @J.started -= instance.OnJ;
            @J.performed -= instance.OnJ;
            @J.canceled -= instance.OnJ;
            @L.started -= instance.OnL;
            @L.performed -= instance.OnL;
            @L.canceled -= instance.OnL;
            @LeftAKey.started -= instance.OnLeftAKey;
            @LeftAKey.performed -= instance.OnLeftAKey;
            @LeftAKey.canceled -= instance.OnLeftAKey;
            @RightAKey.started -= instance.OnRightAKey;
            @RightAKey.performed -= instance.OnRightAKey;
            @RightAKey.canceled -= instance.OnRightAKey;
        }

        public void RemoveCallbacks(ITreeHopActions instance)
        {
            if (m_Wrapper.m_TreeHopActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITreeHopActions instance)
        {
            foreach (var item in m_Wrapper.m_TreeHopActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TreeHopActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TreeHopActions @TreeHop => new TreeHopActions(this);

    // QuizGame
    private readonly InputActionMap m_QuizGame;
    private List<IQuizGameActions> m_QuizGameActionsCallbackInterfaces = new List<IQuizGameActions>();
    private readonly InputAction m_QuizGame_A;
    private readonly InputAction m_QuizGame_R;
    private readonly InputAction m_QuizGame_H;
    private readonly InputAction m_QuizGame_P;
    public struct QuizGameActions
    {
        private @Controls m_Wrapper;
        public QuizGameActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @A => m_Wrapper.m_QuizGame_A;
        public InputAction @R => m_Wrapper.m_QuizGame_R;
        public InputAction @H => m_Wrapper.m_QuizGame_H;
        public InputAction @P => m_Wrapper.m_QuizGame_P;
        public InputActionMap Get() { return m_Wrapper.m_QuizGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(QuizGameActions set) { return set.Get(); }
        public void AddCallbacks(IQuizGameActions instance)
        {
            if (instance == null || m_Wrapper.m_QuizGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_QuizGameActionsCallbackInterfaces.Add(instance);
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @R.started += instance.OnR;
            @R.performed += instance.OnR;
            @R.canceled += instance.OnR;
            @H.started += instance.OnH;
            @H.performed += instance.OnH;
            @H.canceled += instance.OnH;
            @P.started += instance.OnP;
            @P.performed += instance.OnP;
            @P.canceled += instance.OnP;
        }

        private void UnregisterCallbacks(IQuizGameActions instance)
        {
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @R.started -= instance.OnR;
            @R.performed -= instance.OnR;
            @R.canceled -= instance.OnR;
            @H.started -= instance.OnH;
            @H.performed -= instance.OnH;
            @H.canceled -= instance.OnH;
            @P.started -= instance.OnP;
            @P.performed -= instance.OnP;
            @P.canceled -= instance.OnP;
        }

        public void RemoveCallbacks(IQuizGameActions instance)
        {
            if (m_Wrapper.m_QuizGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IQuizGameActions instance)
        {
            foreach (var item in m_Wrapper.m_QuizGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_QuizGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public QuizGameActions @QuizGame => new QuizGameActions(this);

    // SpeedType
    private readonly InputActionMap m_SpeedType;
    private List<ISpeedTypeActions> m_SpeedTypeActionsCallbackInterfaces = new List<ISpeedTypeActions>();
    private readonly InputAction m_SpeedType_Keyboard;
    public struct SpeedTypeActions
    {
        private @Controls m_Wrapper;
        public SpeedTypeActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Keyboard => m_Wrapper.m_SpeedType_Keyboard;
        public InputActionMap Get() { return m_Wrapper.m_SpeedType; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpeedTypeActions set) { return set.Get(); }
        public void AddCallbacks(ISpeedTypeActions instance)
        {
            if (instance == null || m_Wrapper.m_SpeedTypeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpeedTypeActionsCallbackInterfaces.Add(instance);
            @Keyboard.started += instance.OnKeyboard;
            @Keyboard.performed += instance.OnKeyboard;
            @Keyboard.canceled += instance.OnKeyboard;
        }

        private void UnregisterCallbacks(ISpeedTypeActions instance)
        {
            @Keyboard.started -= instance.OnKeyboard;
            @Keyboard.performed -= instance.OnKeyboard;
            @Keyboard.canceled -= instance.OnKeyboard;
        }

        public void RemoveCallbacks(ISpeedTypeActions instance)
        {
            if (m_Wrapper.m_SpeedTypeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpeedTypeActions instance)
        {
            foreach (var item in m_Wrapper.m_SpeedTypeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpeedTypeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpeedTypeActions @SpeedType => new SpeedTypeActions(this);

    // TunnelRunner
    private readonly InputActionMap m_TunnelRunner;
    private List<ITunnelRunnerActions> m_TunnelRunnerActionsCallbackInterfaces = new List<ITunnelRunnerActions>();
    private readonly InputAction m_TunnelRunner_A;
    private readonly InputAction m_TunnelRunner_D;
    private readonly InputAction m_TunnelRunner_LeftArrowKey;
    private readonly InputAction m_TunnelRunner_RightArrowKey;
    public struct TunnelRunnerActions
    {
        private @Controls m_Wrapper;
        public TunnelRunnerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @A => m_Wrapper.m_TunnelRunner_A;
        public InputAction @D => m_Wrapper.m_TunnelRunner_D;
        public InputAction @LeftArrowKey => m_Wrapper.m_TunnelRunner_LeftArrowKey;
        public InputAction @RightArrowKey => m_Wrapper.m_TunnelRunner_RightArrowKey;
        public InputActionMap Get() { return m_Wrapper.m_TunnelRunner; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TunnelRunnerActions set) { return set.Get(); }
        public void AddCallbacks(ITunnelRunnerActions instance)
        {
            if (instance == null || m_Wrapper.m_TunnelRunnerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TunnelRunnerActionsCallbackInterfaces.Add(instance);
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @D.started += instance.OnD;
            @D.performed += instance.OnD;
            @D.canceled += instance.OnD;
            @LeftArrowKey.started += instance.OnLeftArrowKey;
            @LeftArrowKey.performed += instance.OnLeftArrowKey;
            @LeftArrowKey.canceled += instance.OnLeftArrowKey;
            @RightArrowKey.started += instance.OnRightArrowKey;
            @RightArrowKey.performed += instance.OnRightArrowKey;
            @RightArrowKey.canceled += instance.OnRightArrowKey;
        }

        private void UnregisterCallbacks(ITunnelRunnerActions instance)
        {
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @D.started -= instance.OnD;
            @D.performed -= instance.OnD;
            @D.canceled -= instance.OnD;
            @LeftArrowKey.started -= instance.OnLeftArrowKey;
            @LeftArrowKey.performed -= instance.OnLeftArrowKey;
            @LeftArrowKey.canceled -= instance.OnLeftArrowKey;
            @RightArrowKey.started -= instance.OnRightArrowKey;
            @RightArrowKey.performed -= instance.OnRightArrowKey;
            @RightArrowKey.canceled -= instance.OnRightArrowKey;
        }

        public void RemoveCallbacks(ITunnelRunnerActions instance)
        {
            if (m_Wrapper.m_TunnelRunnerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITunnelRunnerActions instance)
        {
            foreach (var item in m_Wrapper.m_TunnelRunnerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TunnelRunnerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TunnelRunnerActions @TunnelRunner => new TunnelRunnerActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IFreeCameraActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IDiceActions
    {
        void OnRoll(InputAction.CallbackContext context);
    }
    public interface IBoardControllerActions
    {
        void OnToggleFreelook(InputAction.CallbackContext context);
    }
    public interface IPauseActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IKanjiCrossRotateActions
    {
        void OnA(InputAction.CallbackContext context);
        void OnD(InputAction.CallbackContext context);
        void OnW(InputAction.CallbackContext context);
        void OnLeftKey(InputAction.CallbackContext context);
        void OnRightKey(InputAction.CallbackContext context);
        void OnUpKey(InputAction.CallbackContext context);
    }
    public interface ITreeHopActions
    {
        void OnA(InputAction.CallbackContext context);
        void OnD(InputAction.CallbackContext context);
        void OnR(InputAction.CallbackContext context);
        void OnY(InputAction.CallbackContext context);
        void OnJ(InputAction.CallbackContext context);
        void OnL(InputAction.CallbackContext context);
        void OnLeftAKey(InputAction.CallbackContext context);
        void OnRightAKey(InputAction.CallbackContext context);
    }
    public interface IQuizGameActions
    {
        void OnA(InputAction.CallbackContext context);
        void OnR(InputAction.CallbackContext context);
        void OnH(InputAction.CallbackContext context);
        void OnP(InputAction.CallbackContext context);
    }
    public interface ISpeedTypeActions
    {
        void OnKeyboard(InputAction.CallbackContext context);
    }
    public interface ITunnelRunnerActions
    {
        void OnA(InputAction.CallbackContext context);
        void OnD(InputAction.CallbackContext context);
        void OnLeftArrowKey(InputAction.CallbackContext context);
        void OnRightArrowKey(InputAction.CallbackContext context);
    }
}
